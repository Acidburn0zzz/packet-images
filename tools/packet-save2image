#!/bin/bash
##
# Usage:   ./save2image docker-save-file.tar
# Description:	Extracts a multi-layer "docker save" TAR archive, finds the
#		largest archives and then consolidates them within a single
#		.tar.gz rootfs archive.
##

usage() {
	cat >&2 <<EOF
usage: $0 [-vh] docker-saved-file.tar
	-v                make verbose
	-h		  display help
	docker-save-file  specify the docker save file to convert, eg: docker-save-file.tar
EOF
}

say() {
	echo "$@" >&2
}

realpath() {
	for arg in "$@"; do
		cd "$(dirname "$arg")"
		echo "$PWD/$(basename "$arg")"
	done
}

msg() { :; }

set -e

# Get cli options
while getopts "vh:" OPTION; do
	case $OPTION in
		h) usage && exit 0 ;;
		v) msg() { say "$@"; } ;;
		*) usage && exit 1 ;;
	esac
done

shift $((OPTIND - 1))

dockersave=$1
if [[ -z $dockersave ]]; then
	say "$0: No docker save file provided but is required."
	exit 1
fi

if [[ -f $dockersave ]]; then
	msg "Docker save file exists... good"
else
	say "Docker save file not valid or is missing"
	exit 1
fi

dockersave=$(realpath "$dockersave")
outfile=$PWD/$(basename "$dockersave")-image.gz

# Check for deps
for dep in tar jq mktemp; do
	if ! type $dep &>/dev/null; then
		say "Error: $dep not found. Please install it first."
		exit 1
	fi
done

tmp=$(mktemp -d -t pkimage-XXXXXXX)
# shellcheck disable=SC2064
trap "rm -rf $tmp" EXIT
msg "Temp directory is: $tmp"

packdir=$tmp/consolidated
mkdir "$packdir"

cd "$tmp"
tar -xf "$dockersave"
for layer in $(jq -r '.[0].Layers[]' manifest.json); do
	msg "Extracting sorted layer $layer"
	tar -xf "$layer" -C "$packdir"
	find "$packdir" -name .wh.\* | while read -r path; do
		rm -rf "$path" "${path#.wh.}"
	done
done

cd "$packdir"
say "Creating consolidated image archive..."
if tar -czf "$outfile" --totals --checkpoint=.1000 ./; then
	say "Image archive $dockersave-image.gz created successfully"
else
	say "ERROR: Image archive creation failed"
fi
